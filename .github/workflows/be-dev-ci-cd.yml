name: BE DEV CI/CD Pipeline

on:
  push:
    branches:
      - be/dev
      - be/ci/118
    paths:
      - 'be/**'
      - '*'

jobs:
  build:
    name: Build Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '21'
          cache: gradle

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        working-directory: ./be/xmash

      - name: Build with Gradle
        run: ./gradlew bootJar
        working-directory: ./be/xmash

      - name: Build Docker image
        working-directory: ./be/xmash
        run: |
          ls -la
          echo "----------------------------"
          echo ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGE_NAME }}:dev
          docker build -f Dockerfile-dev -t ${{ secrets.DOCKERHUB_USERNAME }}"/"${{ secrets.DOCKERHUB_IMAGE_NAME }}:dev ./

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGE_NAME }}:dev

  deploy:
    needs: build
    name: Deploy Backend
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Transfer files
        run: |
          ls be/xmash
          ls be/xmash/src/main/resources
          scp -P ${{ secrets.GCP_SSH_PORT }} -r be/xmash/src/main/resources/docker-compose-dev.yml ${{ secrets.GCP_SSH_USER }}@${{ secrets.GCP_PUBLIC_IP }}:/home/sejin/xmash/dev/docker-compose.yml

      - name: Set up SSH
        run: |
          # Create the .ssh directory
          mkdir -p ~/.ssh
          
          # Add the private key
          echo "${{ secrets.GCP_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Add the known_hosts file to avoid SSH host key verification
          ssh-keyscan -p ${{ secrets.GCP_SSH_PORT }} ${{ secrets.GCP_PUBLIC_IP }} >> ~/.ssh/known_hosts      

      - name: Deploy to server
        run: |
          ssh -tt ${{ secrets.GCP_SSH_USER }}@${{ secrets.GCP_PUBLIC_IP }} -p ${{ secrets.GCP_SSH_PORT }} << 'EOF'
          source .bashrc
          
          # Stop the running application if any
          echo "DB_IP_PORT=${{ secrets.MYSQL_DATABASE }}" > .env
          echo "DB_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "DB_USERNAME=${{ secrets.JASYPT_PASSWORD }}" >> .env
          
          # Pull latest Docker images
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          docker compose -f ~/dev/docker-compose.yaml pull
          
          # Restart docker compose
          cd ~/dev
          docker compose up -d
          
          # Clean up unused Docker images
          docker image prune -af
        
          # Remove the old jar file
          echo "Deployment completed successfully!"
          exit
          EOF
    
